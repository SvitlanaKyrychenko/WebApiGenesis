// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package model

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConvertorClient is the client API for Convertor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConvertorClient interface {
	ToUAH(ctx context.Context, in *BtsRateInput, opts ...grpc.CallOption) (*BtsRateResponse, error)
}

type convertorClient struct {
	cc grpc.ClientConnInterface
}

func NewConvertorClient(cc grpc.ClientConnInterface) ConvertorClient {
	return &convertorClient{cc}
}

func (c *convertorClient) ToUAH(ctx context.Context, in *BtsRateInput, opts ...grpc.CallOption) (*BtsRateResponse, error) {
	out := new(BtsRateResponse)
	err := c.cc.Invoke(ctx, "/model.Convertor/ToUAH", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConvertorServer is the server API for Convertor service.
// All implementations must embed UnimplementedConvertorServer
// for forward compatibility
type ConvertorServer interface {
	ToUAH(context.Context, *BtsRateInput) (*BtsRateResponse, error)
	mustEmbedUnimplementedConvertorServer()
}

// UnimplementedConvertorServer must be embedded to have forward compatible implementations.
type UnimplementedConvertorServer struct {
}

func (UnimplementedConvertorServer) ToUAH(context.Context, *BtsRateInput) (*BtsRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToUAH not implemented")
}
func (UnimplementedConvertorServer) mustEmbedUnimplementedConvertorServer() {}

// UnsafeConvertorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConvertorServer will
// result in compilation errors.
type UnsafeConvertorServer interface {
	mustEmbedUnimplementedConvertorServer()
}

func RegisterConvertorServer(s grpc.ServiceRegistrar, srv ConvertorServer) {
	s.RegisterService(&Convertor_ServiceDesc, srv)
}

func _Convertor_ToUAH_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BtsRateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConvertorServer).ToUAH(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Convertor/ToUAH",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConvertorServer).ToUAH(ctx, req.(*BtsRateInput))
	}
	return interceptor(ctx, in, info, handler)
}

// Convertor_ServiceDesc is the grpc.ServiceDesc for Convertor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Convertor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "model.Convertor",
	HandlerType: (*ConvertorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ToUAH",
			Handler:    _Convertor_ToUAH_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "model/btsRate.proto",
}
